/**
 * 
 * CODE FOR 2016
 * 
 * 
 */
package org.usfirst.frc.team4681.robot;

import edu.wpi.first.wpilibj.*;

import com.ni.vision.NIVision;

import com.ni.vision.NIVision.Image;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
	
	//values to be set later
	double distanceTo;
	int activeCam;
	
	//values for controllers
	int driveCtr0 = 0;
	int driveCtr1 = 1;
	int loadCtr = 2;
	int shootCtr0 = 3;
	int shootCtr1 = 4;
	
	//inputs
	String camIn0 = "cam0";
	String camIn1 = "cam1";
	/*
	int rangeSensorIn = 0;
	
	//range sensor
	Ultrasonic rangeIn = new Ultrasonic(1,rangeSensorIn);
	*/
	//inputs and output classes
	private Drive move;
	private Shooter shoot;
	private Loader load;
	private Joystick joy1;
	private Joystick joy2;
	
	//stuff for camera (most of it was copy and pasted last minute, need to take time to understand later)
	Image frame;
	int session0;
	int session1;
	
	
    public void robotInit() {
    	//defining inputs and outputs upon startup
    	move = new Drive(driveCtr0, driveCtr1);
    	joy1 = new Joystick(0);
    	joy2 = new Joystick(1);
    	shoot = new Shooter(shootCtr0, shootCtr1);
    	load = new Loader(loadCtr);
    	
    	/*//for camera
    	frame = NIVision.imaqCreateImage(NIVision.ImageType.IMAGE_RGB, 0);
    	activeCam = 0;
    	
        // the camera name (ex "cam0") can be found through the roborio web interface
        session0 = NIVision.IMAQdxOpenCamera(camIn0,NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        NIVision.IMAQdxConfigureGrab(session0);
        session1 = NIVision.IMAQdxOpenCamera(camIn1,NIVision.IMAQdxCameraControlMode.CameraControlModeController);
        NIVision.IMAQdxConfigureGrab(session1);
        */
        
    }

    /**
     * This function is called periodically during autonomous
     * NOTE:THIS NEEDS TWEAKING	
     * LOTS OF IT
     */
    public void autonomousPeriodic() {
    	move.autoDrive(.75);
    	Timer.delay(1);
    	move.autoDrive(0);
    	//turns x degrees, left is positive
    	move.turn(90);
    	move.autoDrive(.5);
    	Timer.delay(.5);
    	move.autoDrive(0);
    	shoot.projectileLaunch(true);
    	Timer.delay(.5);
    	load.loadBall(.5);
    	Timer.delay(.2);
    	load.loadBall(0);
    	shoot.projectileLaunch(false);
    	
    }

    
    public void telopInit(){
    	/*NIVision.IMAQdxStartAcquisition(session0);
    	NIVision.IMAQdxStartAcquisition(session1);
    	*/
    }
    
    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	//distanceTo = getRange();
    	//tell robot to move
        move.drive(joy1.getY(), joy2.getY());
        //if trigg is pressed, shoot
        shoot.projectileLaunch(joy1.getTrigger());
        //if but3, load in, if but 2, push out
        load.loadBall(joy1.getRawButton(3),joy1.getRawButton(2));
        //does some preset motions
        move.preset(joy2.getRawButton(2), joy2.getRawButton(4), joy2.getRawButton(5));
        /*if(joy2.getRawButton(6)){
        	NIVision.
        	activeCam = 0;
        }
        if(joy2.getRawButton(7)){
        	activeCam = 1;
        }
        
        //for camera
        sendCamera(activeCam);
        */
        }
    
    //called when diabled
    public void disabledInit(){
    	//NIVision.IMAQdxStopAcquisition(session0);
    	//NIVision.IMAQdxStopAcquisition(session1);
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    
    }
    
    //sends a camera depending on what button was pressed
    /*public void sendCamera(int cam){
    	if(cam == 0){
    		NIVision.IMAQdxStartAcquisition(session0);
            NIVision.IMAQdxGrab(session0, frame, 1);
    	} else {
    		NIVision.IMAQdxStartAcquisition(session1);
            NIVision.IMAQdxGrab(session1, frame, 1);
    	}
    	CameraServer.getInstance().setImage(frame);
    }
    */
    //returns the range sensor input as meters
    /*public double getRange(){
    	return rangeIn.getRangeMM()/1000;
    }
    */
}
